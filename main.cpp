/*Interrupt for audio output?
 *2 dma channels
 *can we pre-emp systic handler?
 *
 *output single char
 *then do stream operator
 *
 **/
#include "main.h"

osThreadId LEDThread1Handle, LEDThread2Handle;

static void LED_Thread1(void const *argument);
static void LED_Thread2(void const *argument);

void SystemClock_Config(void);

//class Sample_buffer {
	//static float* base_ptr;
	//static float* last_output_ptr;
	//static float* last_input_ptr;
	//static void init(void);
//
//};
//
//float* Sample_buffer::base_ptr = nullptr;
//float* Sample_buffer::last_output_ptr = nullptr;
//float* Sample_buffer::last_input_ptr = nullptr;
//
//void Sample_buffer::init() {
	//base_ptr = (float*) pvPortMalloc(100 * sizeof(float));
//}


class Sample_buffer {
	static uint32_t buffer_size;
	static float buffer[buffer_size];
	static uint32_t last_output_index; 
	static uint32_t last_input_index;
public:
	static void add_sample(float);
	static void get_sample(float);
};

uint32_t Sample_buffer::buffer_size {256};

uint32_t Sample_buffer::last_output_index {0};
uint32_t Sample_buffer::last_input_index {0};


void Sample_buffer::add_sample(float sample) {
	
}
void Sample_buffer::get_sample(float sample) {}



int main(void)
{
	HAL_Init(); 
	SystemClock_Config();
	Dac_1::init();
	Usart_2::init();
	Tim::init();
	char led1[] = "LED1"; 
	char led2[] = "LED2"; 
	Dac_1::set_value(0xFFF);
	Usart_2::transmit_byte('X');
	
	/* Thread 1 definition */
	const osThreadDef_t os_thread_def_LED1 = \
     { led1, LED_Thread1, osPriorityNormal, 0, configMINIMAL_STACK_SIZE };
  
	/*  Thread 2 definition */
	const osThreadDef_t os_thread_def_LED2 = \
	{ led2, LED_Thread2, osPriorityNormal, 0, configMINIMAL_STACK_SIZE };
  
	/* Start thread 1 */	
	LEDThread1Handle = osThreadCreate(&os_thread_def_LED1, NULL);

	/* Start thread 2 */
	LEDThread2Handle = osThreadCreate(&os_thread_def_LED2, NULL);

	/* Start scheduler */
	osKernelStart();

	 /* We should never get here as control is now taken by the scheduler */
	for (;;);
}


extern "C" {
	void SysTick_Handler(void)
	{
		Dac_1::set_value_fast(0xFFF);
		HAL_IncTick();
		osSystickHandler();
		Dac_1::set_value_fast(0x000);
	}
}

void TIM2_IRQHandler_cpp(void) {
	//IRQ_objects::sample_tick++;
}


extern "C" {
	void TIM2_IRQHandler(void)
	{
		TIM2_IRQHandler_cpp();
		HAL_TIM_IRQHandler(&(Tim::htim2));
	}
}

static void LED_Thread1(void const *argument)
{
	(void) argument;
	
	while (1)
		Dac_1::set_value_fast(0x7FF);

}


static void LED_Thread2(void const *argument)
{

	(void) argument;
	
	while(1)
		Dac_1::set_value_fast(0xFFF);

	
}


//Mainly autogenerated code
//180MHz clock
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct {}
	;
	RCC_ClkInitTypeDef RCC_ClkInitStruct {}
	;

	/** Configure the main internal regulator output voltage 
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
	/** Initializes the CPU, AHB and APB busses clocks 
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 16;
	//Tuned for my microcontroller
  RCC_OscInitStruct.PLL.PLLN = 374;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	RCC_OscInitStruct.PLL.PLLR = 2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		while (1) ;
	}
	/** Activate the Over-Drive mode 
	*/
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
	{
		while (1) ;
	}
	/** Initializes the CPU, AHB and APB busses clocks 
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
	                            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
	{
		while (1) ;
	}
}

